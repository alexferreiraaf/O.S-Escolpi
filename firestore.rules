/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user has a dedicated data tree under `/artifacts/{appId}/users/{userId}`,
 * and only the authenticated user with the matching `userId` can access their data.
 *
 * Data Structure:
 * - `/artifacts/{appId}/users/{userId}`: Stores user profile data. Only the user can read/write their own profile.
 * - `/artifacts/{appId}/users/{userId}/service_orders/{serviceOrderId}`: Stores service orders specific to each user. Only the user can manage their own service orders.
 *
 * Key Security Decisions:
 * - Users can only access their own data. No cross-user data access is allowed.
 * - Listing of service orders is restricted to the owner.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profile documents.
     * @path /artifacts/{appId}/users/{userId}
     * @allow (create) - Authenticated user can create their own user document if the userId matches their auth.uid.
     * @allow (get, update, delete) - Authenticated user can get, update, and delete their own user document if the userId matches their auth.uid and the document exists.
     * @deny (create) - User cannot create a document with a userId that does not match their auth.uid.
     * @deny (get, update, delete) - User cannot get, update or delete another user's document.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /artifacts/{appId}/users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isExistingOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for service order documents under a specific user.
     * @path /artifacts/{appId}/users/{userId}/service_orders/{serviceOrderId}
     * @allow (create) - Authenticated user can create a service order under their own user document if the userId in the path matches their auth.uid.
     * @allow (get, update, delete) - Authenticated user can get, update, and delete their own service order if the userId in the path matches their auth.uid and the document exists.
     * @allow (list) - Authenticated user can list service orders under their own user document if the userId in the path matches their auth.uid.
     * @deny (create) - User cannot create a service order under another user's document or with a userId that does not match their auth.uid.
     * @deny (get, update, delete) - User cannot get, update or delete another user's service order.
     * @principle Enforces document ownership for all operations on service orders.
     */
    match /artifacts/{appId}/users/{userId}/service_orders/{serviceOrderId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isExistingOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}